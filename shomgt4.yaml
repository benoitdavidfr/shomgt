title: conception de ShomGt4
abstract: |
  Nouvelle version de ShomGT dont les principes sont
  - gestion collaborative de ShomGT
    - notamment permettre à plusieurs personnes d'effectuer les mises à jour de manière concurrente
      - -> mettre à jour des cartes entièrement en mode web sans nécessiter de gérer une copie locale comme en V3
    - permettre à un nouvel utilisateur de s'ouvrir lui-même un compte sous réserve de son domaine mail
    - gestion d'un forum entre utilisateurs
    - avoir qqs admins pour réguler le fonctionnement
      - annuler les livraisons dégradant le service
      - banir les utilisateurs indélicats
      - gérer la liste des domaines mails autorisés
      - gérer la liste des adresses IP autorisées
  - mettre en oeuvre une stratégie de conservation limitée des données pour éviter la saturation du stockage
    - utilisation d'un compte dédié d'Alwaysdata avec 20 Go de stockage
  - migration vers des environnements (Alwaysdata et github) indépendants de moi
  - automatisation de certaines tâches régulières
    - mettre en oeuvre par cron d'un script sunday.php tous les dimanche vers 4h
    - mettre en oeuvre la stratégie de conservation des données
      - notamment suppression des versions de cartes remplacées depuis longtemps
    - mettre à jour le GAN
  - mise en base des infos stockées en V3 dans des fichiers Yaml et mises à jour concurremment en V4
  - évols plus limitées
    - permettre la mise à jour des cartes spéciales par le client
    - meilleure gestion en production de l'affichage des erreurs
    - restructuration des archives de cartes
      - suppression de la notion de livraison qui n'est plus pertinente
      - conservation de l'utilisateur ayant déposé la carte
forum:
  phpbb: https://www.phpbb.com/about/
  sympa:
    avantages:
      - plus simple à mettre en oeuvre qu'un forum
      - gérable depuis l'extérieur de l'intranet
      - affichage de la responsabilité du ministère (nom de domaine)
alwaysdata:
  - créer un compte shomgt (ou geoapi) indépendant de bdavid que je puisse céder à quelqu'un
  - avec gestion du nom de domaine geoapi
  - la version de prod -> https://geoapi.fr/shomgt -> ~/www/shomgt
    - ou https://shomgt.alwaysdata.net/
  - avec une version préprod -> https://geoapi.fr/shomgtpp -> ~/www/shomgtpp
  - stockage de shomgeotiff dans ~/shomgeotiff
github:
  - créer une branch shomgt4 (FAIT)
    - je ne sais pas la copier sur github
  - créer un compte organization shomgt dans lequel je crée un dépôt shomgt4
batchRégulierDEntretien:
  - batch chaque Dimanche à 4h
  - mise à jour du GAN
  - mise en oeuvre de la stratégie de conservation des cartes et des logs
  - suppression des dépôts en attente non validés
conservation:
  title: stratégie de conservation des données
  cartes:
    principes:
      - je garde pour chaque carte ttes les versions qui datent de moins d'un an
      - ainsi que la version la plus récente qui date de plus d'un an
      - et je jette donc les autres versions qui datent de plus d'un an
      - cela permet pendant un an d'annuler le dépôt d'une nouvelle version dégradant le service
    réf:
      - shomgeotiff complet pèse environ 9 Go
      - je peux en supprimer un peu moins de la moitié en appliquant les principes ci-dessus
      - je peux probablement me satisfaire de 10 Go pour le stockage des cartes
    commentFaire:
      - dans le script sunday.php
      - voir script bo/purge.php
  logsDeConnexion:
    - faire des synthèses des logs ttes les semaines
    - les logs détaillés pèsent environ 140 Mo pour 6 mois
    - supprimer les logs détaillés au bout d'un an
orgShomgeotiff:
  - organisation de ~/shomgeotiff
  - 3 sous-répertoires de ~/shomgeotiff
    - archives
      - avec un répertoire par carte, nommé par le num. de la carte
      - dans ce répertoire de carte
        - 2 fichiers .7z et .md.json par version
          - en utilisant un nom de base de la forme {mapnum}-{GanWeek}
          - où {GanWeek} est la semaine Shom de publication de la version constituée de 4 chiffres
            - 2 premiers chiffres correspondant aux 2 derniers chiffres de l'année
            - 2 derniers chiffres correspondant à la semaine
          - quand la semaine de publication est inconnue on utilise la semaine de dépôt de la carte
        - éventuellement un fichier {mapnum}-{GanWeek}.md.json indiquant l'obsolescence de la carte
          - où {GanWeek} est la semaine Shom de parution du retrait de la carte
          - ou si cette semaine n'est pas connue la semaine de fourniture de l'info
    - current
      - pour chaque carte active 2 liens vers la dernière version de la carte dans archives nommés respectivement
        - {mapnum}.7z pour le contenu de la carte
        - {mapnum}.md.json pour les métadonnées associées
      - pour chaque carte obsolète un lien nommé {mapnum}.md.json
        - vers le fichier {mapnum}-{GanWeek}.md.json indiquant l'obsolescence de la carte
    - users
      - un répertoire par utilisateur nommé avec son adresse email
      - contenant les cartes en cours de dépôt
  - les fichiers .md.json des cartes normales contiennent
    - title: titre de la carte
    - alternate: titre alternatif
    - version: version sous la forme 'YYYYcN', eg "2005c29"
    - edition: édition telque présente dans les MD XML, exemple "Edition n° 3 - 2005 - Dernière correction : 29",
    - ganWeek: semaine GAN sur 4 chiffres
    - ganDate: date de parution
    - creation/revision: date de mise à jour définie dans le fichier de MD XML
  - les fichiers .md.json des cartes spéciales contiennent
    - version: undefined
    - creation: date de mise à jour définie dans le fichier de MD XML
  - les fichiers .md.json d'obsolescence contiennent
    - status: obsolete

miseEnBase:
  description: mise en base de certaines informations pour la V4
  user:
    description: compte utilisateur créé par vérification de l'adresse email
    attributs:
      num:
        type: int
        description: numéro d'ordre du compte auto incrémenté
        clé: primaire
      login:
        type: string
        description: adresse email
        clé: secondaire unique
      epasswd:
        type: string
        description: mot de passe encrypté
      role:
        type: string
        description: rôle de l'utilisateur
        enum:
          admin: administrateur ayant notamment le droit de changer les rôles des utilisateurs
          normal: utilisateur normal ayant le droit d'ajouter et supprimer des cartes
          restricted: utilisateur ayant le droit de consulter les cartes mais pas d'en ajouter ou d'en supprimer
          banned: utilisateur banni ayant aucun droit, et qui ne peut réactiver son compte
          suspended: utilisateur suspendu, l'utilisateur n'a plus aucun droit jusqu'à ce qu'il réactive son compte
          temp: utilisateur en cours de création dont la validité n'a pas été vérifiée
      secret:
        type: string
        description: clé secrète envoyée par email pour vérifier l'adresse email
      sent:
        type: date+time
        description: date et heure d'envoi du dernier mail de vérification
      create:
        type: date+time
        description: date et heure de création du compte ou de son dernier renouvellement
  mapcat:
    description: catalogue des cartes obsolètes ou non avec un n-uplet par carte
    attributs:
      mapnum:
        type: string
        description: numéro de carte sur 4 chiffres
      title:
        type: string
        description: titre de la carte sans le numéro en tête
      delete:
        type: date ou null
        description: date de suppression pour les cartes obsolètes ou null si la carte n'est pas obsolète
      interest:
        type: string
        description: 'N' pour les cartes d'intérêt insuffisant, 'Y' pour les autres cartes
      content:
        type: JSON
        description: enregistrement conforme au schéma JSON
      bbox:
        type: polygon
        description: boite engobante de la carte
  trace:
    description: |
      traces des ajouts et suppressions de cartes et de l'annulation éventuelle de l'action
      L'action peut être
       - ajout d'une nouvelle carte
       - remplacement d'une carte par une nouvelle version
       - suppression d'une carte obsolète
    attributs:
      mapnum:
        description: numéro de la carte ajoutée, remplacée ou supprimée
      version:
        description: version de la carte ajoutée, null pour une carte supprimée
      user:
        description: utilisateur ayant réalisé l'action
      action:
        description: type d'action
        enum:
          add: ajout d'une nouvelle carte
          replacement: remplacement d'une carte par une nouvelle version
          delete: suppression d'une carte obsolète
      dt:
        description: date et heure de l'action
      canceldt:
        description: date et heure de l'annulation ou null si l'action n'a pas été annulée
      canceluser:
        description: admin ayant annulé l'action ou null si l'action n'a pas été annulée
      path:
        description: chemin vers l'archive 7z de la version remplacée ou de la carte supprimée, null pour une nouvelle carte
  maildomain:
    description: liste des domaines mails autorisés pour les utilisateurs, gérée par un admin
  ipaddress:
    description: liste des adresses IPv4 et préfixes IPv6 autorisés, gérée par un admin
  gan:
    description: stockage des infos du GAN mises à jour régulièrement par cron
cartesSpéciales:
  - Une archive 7z ayant un seul .tif ou pas de .tif et un seul .pdf n'a pas besoin du champ geotiffname
  - le champ geotiffname reste nécessaire dans les autres cas
  - dans le serveur de cartes, je gère une version 4 de la liste des cartes avec
    - pour les cartes spéciales la version n'est plus undefined mais le geotiffname éventuellement déduit
admin:
  title: interface admin
  fonctionnalités:
    - gestion de
      - la liste des domaines autorisés
      - la liste des adresses IP autorisées
    - annulation du dépôt d'une carte, restitution de la version précédente
    - modification du rôle d'un utilisateur
bo:
  title: créer un BO pour les utilisateurs authentifiés
  fonctionnalités:
    - se loguer / créer un compte
    - déposer une carte, la vérifier,
    - marquer une carte comme obsolète,
    - modifier le catalogue
    - intégrer une carte déposée dans le portefeuille (cad dans le serveur de cartes)
    - mettre à jour les services ShomGt avec les nouvelles versions de cartes
  gestionDeComptes:
    - initialement un compte admin est créé avec une adresse email et un mot de passe
    - pour créer un nouveau compte
      - un utilisateur indique son adresse et son mot de passe
      - un enregistrement est créé dans la table user avec le rôle 'temp' et un secret généré aléatoirement
      - un mail lui est envoyé avec le secret intégré dans un lien
      - l'utilisateur doit activer le lien envoyé ce qui valide son compte et le fait passer en rôle 'normal'
    - si un utilisateur perd son mot de passe
      - il donne son adresse
      - un nouveau secret aléatoire est généré
      - un mail lui est envoyé avec le secret intégré dans un lien
      - le lien permet de saisir un nouveau mot de passe interactivement
    - un compte créé/renouvellé depuis plus d'un an doit être renouvellé
      - l'idée est d'interdire l'accès aux personnes dont l'adresse mail n'est plus valide
      - un nouveau secret aléatoire est généré
      - un mail est envoyé avec un lien demandant de renouveller le compte
      - si le compte n'est pas renouvellé dans un délai de 8 jours alors le compte est suspendu (rôle 'suspended')
      - un compte suspendu depuis plus de 6 mois est supprimé
      - pour réactiver un compte suspendu, c'est le même process que pour créer un compte
        - mais sans demander un nouveau mot de passe
  dépôt/vérifDUnecarte:
    - l'utilisateur authentifié demande à déposer une nouvelle archive de carte
    - l'archive est stockée dans un répertoire uniquement accessible à l'utilisateur
    - l'utilisateur voit la liste de ses cartes en attente
    - il peut vérifier une carte
  modifCatalogue:
    - il peut modifier le catalogue (ce qui peut être nécessaire pour valider une carte)
  intégrerAuPortfeuille:
    - si la vérif est ok
      - alors il peut intégrer la carte au portefeuille
      - sinon il peut effacer l'archive déposée
    - les cartes en attente non intégrées dans le portefeuille sont effacées par le script d'entretien
    - une fois intégrée au portefeuille les cartes n'"appartiennent" plus à l'utilisateur mais au système
      - il ne peut plus y toucher
  déclarerCarteObsolète:
    - il peut déclarer qu'une carte est obsolète
  mettreAJourServicesShomGt:
    - il peut mettre à jour les services ShomGt avec les nouvelles versions de cartes
    